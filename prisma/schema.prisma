generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  relationMode         = "prisma"
}

model Role {
  id                    String                  @id @default(uuid())
  name                  String
  code                  String                  @db.Text
  description           String?

  createdAt             DateTime                @map("created_at") @default(now())
  updatedAt             DateTime?               @map("updated_at") @updatedAt
  deletedAt             DateTime?               @map("deleted_at")
  version               Int                     @default(0)

  UserRole              UserRole[]
  QurbanEventCommittee  QurbanEventCommitee[]

  @@unique([id])

  @@map("roles")
}

model User {
  id                            String                            @id @default(uuid())
  name                          String
  email                         String?                           @unique
  phoneNumber                   String?                           @unique @map("phone_number")
  image                         String?

  createdAt                     DateTime                          @map("created_at") @default(now())
  updatedAt                     DateTime?                         @map("updated_at") @updatedAt
  deletedAt                     DateTime?                         @map("deleted_at")
  version                       Int                               @default(0)

  UserRole                      UserRole[]
  MosqueUser                    MosqueUser[]
  QurbanEventCommittee          QurbanEventCommitee[]
  QurbanEventCitizen            QurbanEventCitizen[]
  QurbanRegistrationParticipant QurbanRegistrationParticipant[]


  @@unique([id])

  @@map("users")
}

model UserRole {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String      @map("role_id")
  role      Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime    @map("created_at") @default(now())
  updatedAt DateTime?   @map("updated_at") @updatedAt
  deletedAt DateTime?   @map("deleted_at")
  version   Int         @default(0)

  @@unique([id])

  @@map("user_role")

  @@index([userId])
  @@index([roleId])
}

model Mosque {
  id                  String                @id @default(uuid())
  name                String
  address             String?               @db.Text

  createdAt           DateTime              @map("created_at") @default(now())
  updatedAt           DateTime?             @map("updated_at") @updatedAt
  deletedAt           DateTime?             @map("deleted_at")
  version             Int                   @default(0)

  MosqueUser          MosqueUser[]
  MosqueQurbanEvent   MosqueQurbanEvent[]

  @@unique([name])
  @@map("mosques")
}

model MosqueUser {
  id        String    @id @default(uuid())
  mosqueId  String    @map("mosque_id")
  mosque    Mosque    @relation(fields: [mosqueId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime? @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  version   Int       @default(0)

  @@map("mosque_user")

  @@index([mosqueId])
  @@index([userId])
}

model QurbanEvents {
  id                    String                  @id @default(uuid())
  yearExecution         Int                     @map("year_execution")
  dateExecution         DateTime?               @map("date_execution")
  description           String?                 @db.Text

  createdAt             DateTime                @map("created_at") @default(now())
  updatedAt             DateTime?               @map("updated_at") @updatedAt
  deletedAt             DateTime?               @map("deleted_at")
  version               Int                     @default(0)

  mosqueQurbanEvent     MosqueQurbanEvent[]
  qurbanEventCommittee  QurbanEventCommitee[]
  qurbanEventCitizen    QurbanEventCitizen[]
  qurbanRegistration    QurbanRegistration[]

  @@unique([id])

  @@map("qurban_events")
}

model MosqueQurbanEvent {
  id              String        @id @default(uuid())
  mosqueId        String        @map("mosque_id")
  mosque          Mosque        @relation(fields: [mosqueId], references: [id], onDelete: Cascade)
  qurbanEventId   String        @map("qurban_event_id")
  qurbanEvent     QurbanEvents  @relation(fields: [qurbanEventId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @map("created_at") @default(now())
  updatedAt       DateTime?     @map("updated_at") @updatedAt
  deletedAt       DateTime?     @map("deleted_at")
  version         Int           @default(0)

  @@unique([id])

  @@map("mosque_qurban_event")

  @@index([mosqueId])
  @@index([qurbanEventId])
}

model QurbanEventCommitee {
  id              String        @id @default(uuid())
  qurbanEventId   String        @map("qurban_event_id")
  qurbanEvent     QurbanEvents  @relation(fields: [qurbanEventId], references: [id], onDelete: Cascade)
  userId          String        @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId          String        @map("role_id")
  role            Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @map("created_at") @default(now())
  updatedAt       DateTime?     @map("updated_at") @updatedAt
  deletedAt       DateTime?     @map("deleted_at")
  version         Int           @default(0)

  @@unique([id])

  @@map("qurban_event_committee")

  @@index([qurbanEventId])
  @@index([userId])
  @@index([roleId])
}

model QurbanEventCitizen {
  id              String        @id @default(uuid())
  qurbanEventId   String        @map("qurban_event_id")
  qurbanEvent     QurbanEvents  @relation(fields: [qurbanEventId], references: [id], onDelete: Cascade)
  userId          String        @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @map("created_at") @default(now())
  updatedAt       DateTime?     @map("updated_at") @updatedAt
  deletedAt       DateTime?     @map("deleted_at")
  version         Int           @default(0)

  @@unique([id])

  @@map("qurban_event_citizen")

  @@index([qurbanEventId])
  @@index([userId])
}

model SacrificialAnimals {
  id                  String                  @id @default(uuid())
  name                String
  code                String
  minimalAge          Int                     @map("minimal_age")
  maximalUser         Int                     @map("maximal_user")

  createdAt           DateTime                @map("created_at") @default(now())
  updatedAt           DateTime?               @map("updated_at") @updatedAt
  deletedAt           DateTime?               @map("deleted_at")
  version             Int                     @default(0)

  QurbanRegistration  QurbanRegistration[]

  @@unique([id])

  @@map("sacrificial_animals")
}

model QurbanRegistration {
  id                              String                            @id @default(uuid())
  qurbanEventId                   String                            @map("qurban_event_id")
  qurbanEvent                     QurbanEvents                      @relation(fields: [qurbanEventId], references: [id], onDelete: Cascade)
  sacrificialAnimalId             String                            @map("sacrificial_animal_id")
  sacrificialAnimal               SacrificialAnimals                @relation(fields: [sacrificialAnimalId], references: [id], onDelete: Cascade)

  createdAt                       DateTime                          @map("created_at") @default(now())
  updatedAt                       DateTime?                         @map("updated_at") @updatedAt
  deletedAt                       DateTime?                         @map("deleted_at")
  version                         Int                               @default(0)

  QurbanRegistrationParticipant   QurbanRegistrationParticipant[]
  QurbanRegistrationStatus        QurbanRegistrationStatus[]

  @@unique([id])

  @@map("qurban_registration")

  @@index([qurbanEventId])
  @@index([sacrificialAnimalId])
}

model QurbanRegistrationParticipant {
  id                    String              @id @default(uuid())
  qurbanRegistrationId  String              @map("qurban_registration_id")
  qurbanRegistration    QurbanRegistration  @relation(fields: [qurbanRegistrationId], references: [id], onDelete: Cascade)
  userId                String              @map("user_id")
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime            @map("created_at") @default(now())
  updatedAt             DateTime?           @map("updated_at") @updatedAt
  deletedAt             DateTime?           @map("deleted_at")
  version               Int                 @default(0)

  @@unique([id])

  @@map("qurban_registration_participant")

  @@index([qurbanRegistrationId])
  @@index([userId])
}

model QurbanRegistrationStatus {
  id                    String                    @id @default(uuid())
  qurbanRegistrationId  String                    @map("qurban_registration_id")
  qurbanRegistration    QurbanRegistration        @relation(fields: [qurbanRegistrationId], references: [id], onDelete: Cascade)
  status                QurbanRegistrationStates  @default(REGISTERED)

  createdAt             DateTime            @map("created_at") @default(now())
  updatedAt             DateTime?           @map("updated_at") @updatedAt
  deletedAt             DateTime?           @map("deleted_at")
  version               Int                 @default(0)

  @@unique([id])

  @@map("qurban_registration_status")

  @@index([qurbanRegistrationId])
}

enum QurbanRegistrationStates {
  REGISTERED
  CANCELLED
  ARRIVED
  SLAUGHTERING
  SLAUGHTERED
  SKINNING
  MEAT_CUTTING
  MEAT_DELIVERING
  MEAT_DELIVERED
}