generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Role {
  id          String    @id @default(uuid())
  name        String
  code        String    @db.Text
  description String?

  createdAt   DateTime  @map("created_at") @default(now())
  updatedAt   DateTime? @map("updated_at") @updatedAt
  deletedAt   DateTime? @map("deleted_at")
  version     Int       @default(0)

  UserRole UserRole[]

  @@unique([id])

  @@map("roles")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String?   @unique
  phoneNumber String?   @unique @map("phone_number")
  image       String?

  createdAt   DateTime  @map("created_at") @default(now())
  updatedAt   DateTime? @map("updated_at") @updatedAt
  deletedAt   DateTime? @map("deleted_at")
  version     Int       @default(0)

  UserRole    UserRole[]
  MosqueUser  MosqueUser[]

  @@unique([id])

  @@map("users")
}

model UserRole {
  id       String     @id @default(uuid())
  userId   String     @map("user_id")
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId   String     @map("role_id")
  role     Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime? @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  version   Int       @default(0)

  @@unique([id, userId, roleId])

  @@map("user_role")
}

model Mosque {
  id        String    @id @default(uuid())
  name      String
  address   String?   @db.Text

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime? @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  version   Int       @default(0)

  MosqueUser MosqueUser[]

  @@unique([name])
  @@map("mosques")
}

model MosqueUser {
  id        String    @id @default(uuid())
  mosqueId  String    @map("mosque_id")
  mosque    Mosque    @relation(fields: [mosqueId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime? @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  version   Int       @default(0)

  @@map("mosque_user")
}